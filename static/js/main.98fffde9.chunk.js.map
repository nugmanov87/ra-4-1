{"version":3,"sources":["components/HexInput.jsx","components/Container.jsx","App.js","serviceWorker.js","index.js"],"names":["HexInput","props","value","onChange","e","currentTarget","maxLength","type","className","placeholder","Container","state","isWarning","color","result","convert","hex","exec","shift","map","i","parseInt","join","test","slice","length","this","setState","prevState","checkColor","fixColor","style","backgroundColor","change","bind","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAmBeA,EAjBE,SAAAC,GAKf,OACE,2BACEC,MAAOD,EAAMC,MACbC,SAPJ,SAAkBC,GAChBH,EAAME,SAASC,EAAEC,cAAcH,QAO7BI,UAAW,EACXC,KAAK,OACLC,UAAU,yBACVC,YAAY,aC2DHC,E,kDArEb,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IACDU,MAAQ,CACXC,WAAW,EACXC,MAAOZ,EAAMY,MACbC,OAAQ,EAAKC,QAAQd,EAAMY,QALZ,E,oDASXG,GACN,IAAIF,EAAS,4CAA4CG,KAAKD,GAC9D,OAAKF,GAGLA,EAAOI,QACAJ,EAAM,cACFA,EAAOK,KAAI,SAAAC,GAAC,OAAIC,SAASD,EAAG,OAAKE,KAAK,MADpC,KAET,MALK,O,iCAQAT,GACT,MAAO,oBAAoBU,KAAKV,K,+BAGzBA,GACP,MAAoB,MAAbA,EAAM,GAAaA,EAAMW,MAAM,EAAG,GAAlC,WAA2CX,EAAMW,MAAM,EAAG,M,6BAG5DX,GACgB,IAAjBA,EAAMY,OACRC,KAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1Bf,QACAD,UAAWgB,EAAUhB,UACrBE,OAAQc,EAAUd,WAEXY,KAAKG,WAAWhB,IACzBA,EAAQa,KAAKI,SAASjB,GACtBa,KAAKC,SAAS,CACZd,QACAD,WAAW,EACXE,OAAQY,KAAKX,QAAQF,MAGvBa,KAAKC,SAAS,CACZf,WAAW,EACXC,MAAOa,KAAKI,SAASjB,GACrBC,OAAQ,4C,+BAMZ,IAAMb,EAAQ,GAQd,OAPIyB,KAAKf,MAAMC,UACbX,EAAMO,UAAY,UAElBP,EAAM8B,MAAQ,CACZC,gBAAiBN,KAAKf,MAAMG,QAI9B,2BAAYb,EACV,kBAAC,EAAD,CAAUC,MAAOwB,KAAKf,MAAME,MAAOV,SAAUuB,KAAKO,OAAOC,KAAKR,QAC9D,yBAAKlB,UAAU,sBAAsBkB,KAAKf,MAAMG,a,GAhEhCqB,IAAMC,W,MCSfC,MARf,WACE,OACE,yBAAK7B,UAAU,OACf,kBAAC,EAAD,CAAWK,MAAM,cCKDyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.98fffde9.chunk.js","sourcesContent":["import React from 'react';\n\nconst HexInput = props => {\n  function onChange(e) {\n    props.onChange(e.currentTarget.value);\n  }\n\n  return (\n    <input\n      value={props.value}\n      onChange={onChange}\n      maxLength={7}\n      type=\"text\"\n      className=\"hex-field js-hex-field\"\n      placeholder=\"#000000\"\n    />\n  );\n};\n\nexport default HexInput;","import React from \"react\";\nimport HexInput from \"./HexInput\";\n\nclass Container extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isWarning: false,\n      color: props.color,\n      result: this.convert(props.color)\n    };\n  }\n\n  convert(hex) {\n    let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    if (!result) {\n      return null;\n    }\n    result.shift();\n    return result\n      ? `rgb(${result.map(i => parseInt(i, 16)).join(\", \")})`\n      : null;\n  }\n\n  checkColor(color) {\n    return /^#?([\\da-f]{6})$/i.test(color);\n  }\n\n  fixColor(color) {\n    return color[0] === \"#\" ? color.slice(0, 7) : `#${color.slice(0, 6)}`;\n  }\n\n  change(color) {\n    if (color.length !== 7) {\n      this.setState(prevState => ({\n        color,\n        isWarning: prevState.isWarning,\n        result: prevState.result\n      }));\n    } else if (this.checkColor(color)) {\n      color = this.fixColor(color);\n      this.setState({\n        color,\n        isWarning: false,\n        result: this.convert(color)\n      });\n    } else {\n      this.setState({\n        isWarning: true,\n        color: this.fixColor(color),\n        result: \"Ошибка!\"\n      });\n    }\n  }\n\n  render() {\n    const props = {};\n    if (this.state.isWarning) {\n      props.className = \"warning\";\n    } else {\n      props.style = {\n        backgroundColor: this.state.result\n      };\n    }\n    return (\n      <figure {...props}>\n        <HexInput value={this.state.color} onChange={this.change.bind(this)} />\n        <div className=\"message js-message\">{this.state.result}</div>\n      </figure>\n    );\n  }\n}\n\nexport default Container;\n","import React from 'react';\nimport Container from './components/Container';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Container color=\"#129067\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}